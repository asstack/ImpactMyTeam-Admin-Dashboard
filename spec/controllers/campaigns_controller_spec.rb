require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe CampaignsController do

  # This should return the minimal set of attributes required to create a valid
  # Campaign. As you add validations to Campaign, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {title: Faker::Company.name, terms_of_service: '1'} }
  let!(:school) { Fabricate(:school) }
  let!(:user) { login Fabricate(:user) }

  describe "GET index" do
    let!(:campaign) { Fabricate(:campaign, school: school, creator: user) }
    before { get :index, {school_id: school.id} }

    it { should respond_with :success }
    specify { assigns(:campaigns).should eq([campaign]) }
    specify { assigns(:school).should eq(school) }
  end

  describe "GET show" do
    let!(:campaign) { Fabricate(:campaign, status: 'active') }
    before { get :show, {id: campaign.to_param} }

    it { should respond_with :success }
    specify { assigns(:campaign).should eq(campaign) }
  end

  describe "GET new" do
    context 'assigns' do
      before { get :new, {school_id: school.id} }

      it { should respond_with :success }
      specify { assigns(:campaign).should be_a(Campaign) }
      specify { assigns(:campaign).should be_persisted }
      specify { assigns(:campaign).should be_unsaved }
      specify { assigns(:school).should eq(school) }
      specify { assigns(:shopping_cart).should be_a(ShoppingCart) }
      specify { assigns(:campaign).creator.should == user }
    end

    it "creates a new Campaign" do
      expect { get :new, {school_id: school.id } }
        .to change(Campaign, :count).by(1)
    end

    it 'adds a campaign to the proper school' do
      expect { get :new, {school_id: school.id } }
        .to change(school.campaigns, :count).by(1)
    end

    describe 'reuses an unsaved campaign (by user, for school)' do
      let!(:campaign) { Fabricate(:campaign, school: school, creator: user, status: 'unsaved') }

      it 'does not create a new campaign for the [user, school]' do
        expect { get :new, {school_id: school.id} }
          .to_not change(Campaign, :count)
      end

      it 'reuses the last unsaved campaign created by the user for the school' do
        get :new, {school_id: school.id}
        assigns(:campaign).should eq(campaign)
      end

      it 'does not use a campaign created by another user' do
        campaign.creator = Fabricate(:user)
        campaign.save!

        get :new, {school_id: school.id}
        assigns(:campaign).should_not eq(campaign)
      end
    end
  end

  describe "GET edit" do
    let!(:campaign) { Fabricate(:campaign, creator: user) }
    before { get :edit, {id: campaign.to_param} }

    context 'with a shopping cart' do
      it { should respond_with :success }
      specify { assigns(:campaign).should eq(campaign) }
      specify { assigns(:shopping_cart).should eq(campaign.shopping_cart) }
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested campaign" do
        campaign = Fabricate(:campaign, creator: user, school: school)
        # Assuming there are no other campaigns in the database, this
        # specifies that the Campaign created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Campaign.any_instance.should_receive(:update_attributes)
          .with({ "title" => "MyString", "status_event" => "mark_as_draft" })
        put :update, {id: campaign.to_param, campaign: { "title" => "MyString" }}
      end

      it "assigns the requested campaign as @campaign" do
        campaign = Fabricate(:campaign, creator: user, school: school)
        put :update, {id: campaign.to_param, campaign: valid_attributes}
        assigns(:campaign).should eq(campaign)
      end

      it "redirects to the campaign" do
        campaign = Fabricate(:campaign, creator: user, school: school)
        put :update, {id: campaign.to_param, campaign: valid_attributes}
        response.should redirect_to(campaign)
      end
    end

    describe "with invalid params" do
      it "assigns the campaign as @campaign" do
        campaign = Fabricate(:campaign, creator: user, school: school)
        # Trigger the behavior that occurs when invalid params are submitted
        Campaign.any_instance.stub(:save).and_return(false)
        put :update, {id: campaign.to_param, campaign: { "title" => "invalid value" }}
        assigns(:campaign).should eq(campaign)
      end

      it "re-renders the 'edit' template" do
        campaign = Fabricate(:campaign, creator: user, school: school)
        # Trigger the behavior that occurs when invalid params are submitted
        Campaign.any_instance.stub(:save).and_return(false)
        put :update, {id: campaign.to_param, campaign: { "title" => "invalid value" }}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested campaign" do
      campaign = Fabricate(:campaign, school: school, creator: user)
      expect {
        delete :destroy, {id: campaign.to_param}
      }.to change(Campaign, :count).by(-1)
    end

    it "redirects to the campaigns list" do
      campaign = Fabricate(:campaign, school: school, creator: user)
      delete :destroy, {id: campaign.to_param}
      response.should redirect_to campaign.school
    end
  end

end
